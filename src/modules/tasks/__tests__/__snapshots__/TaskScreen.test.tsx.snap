// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Testing Task Screen Should render the task screen with a task 1`] = `
<RCTSafeAreaView
  style={
    {
      "flex": 1,
    }
  }
>
  <View
    style={
      {
        "alignItems": "center",
        "padding": 12,
        "width": "100%",
      }
    }
  >
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "alignItems": "center",
          "backgroundColor": "blue",
          "borderRadius": 12,
          "opacity": 1,
          "padding": 12,
          "width": 150,
        }
      }
    >
      <Text
        style={
          {
            "color": "white",
            "fontSize": 16,
          }
        }
      >
        Add Task
      </Text>
    </View>
    <RCTScrollView
      ItemSeparatorComponent={[Function]}
      data={
        [
          {
            "description": "Task 1",
            "id": 1,
          },
        ]
      }
      getItem={[Function]}
      getItemCount={[Function]}
      keyExtractor={[Function]}
      onContentSizeChange={[Function]}
      onLayout={[Function]}
      onMomentumScrollBegin={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      refreshing={true}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={0.0001}
      stickyHeaderIndices={[]}
      style={
        {
          "marginTop": 12,
          "width": "100%",
        }
      }
      viewabilityConfigCallbackPairs={[]}
    >
      <View>
        <View
          onFocusCapture={[Function]}
          onLayout={[Function]}
          style={null}
        >
          <View
            style={
              {
                "borderRadius": 12,
                "borderWidth": 1,
                "padding": 12,
                "width": "100%",
              }
            }
          >
            <Text
              style={
                {
                  "color": "black",
                  "fontSize": 16,
                }
              }
            >
              Task 1
            </Text>
          </View>
        </View>
      </View>
    </RCTScrollView>
  </View>
</RCTSafeAreaView>
`;

exports[`Testing Task Screen should render the task screen 1`] = `
<RCTSafeAreaView
  style={
    {
      "flex": 1,
    }
  }
>
  <View
    style={
      {
        "alignItems": "center",
        "padding": 12,
        "width": "100%",
      }
    }
  >
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "alignItems": "center",
          "backgroundColor": "blue",
          "borderRadius": 12,
          "opacity": 1,
          "padding": 12,
          "width": 150,
        }
      }
    >
      <Text
        style={
          {
            "color": "white",
            "fontSize": 16,
          }
        }
      >
        Add Task
      </Text>
    </View>
    <RCTScrollView
      ItemSeparatorComponent={[Function]}
      data={[]}
      getItem={[Function]}
      getItemCount={[Function]}
      keyExtractor={[Function]}
      onContentSizeChange={[Function]}
      onLayout={[Function]}
      onMomentumScrollBegin={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      refreshing={true}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={0.0001}
      stickyHeaderIndices={[]}
      style={
        {
          "marginTop": 12,
          "width": "100%",
        }
      }
      viewabilityConfigCallbackPairs={[]}
    >
      <View />
    </RCTScrollView>
  </View>
</RCTSafeAreaView>
`;
